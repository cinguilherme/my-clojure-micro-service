<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="ed898e8d-23ee-4a91-b2fa-ef2b626f75c5" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/this_one/service.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/this_one/service.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="1" />
  </component>
  <component name="ProjectId" id="1XrrHnXfWNj92M7KOfKmcvXrq5e" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="GoToNamespace.includeLibraries" value="false" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
  </component>
  <component name="ReplState" timestamp="1581882075755">{:repl-history {:ide [], :local [{:command &quot;(def dev-serv (run-dev))\n&quot;, :offset 24, :ns &quot;this-one.server&quot;} {:command &quot;(def dev-serv (run-dev))&quot;, :offset 24, :ns &quot;this-one.server&quot;} {:command &quot;(defn post-gui [request]\n  (prn (:json-params request))\n\n  (def reqb (:json-params request))\n  (let [incoming\n        (:json-params request)\n        connect-string mongo-uri {:keys [conn db]} (mg/connect-via-uri connect-string)\n        (ring-resp/created \&quot;the url\&quot; (mc/insert-and-return db \&quot;catalog\&quot; incoming))])\n\n\n\n  (ring-resp/created \&quot;http://fake-201-url\&quot; (merge grop reqb)))&quot;, :offset 378, :ns &quot;this-one.service&quot;} {:command &quot;(defn post-gui [request]\n  (prn (:json-params request))\n  (let [incoming\n        (:json-params request)\n        connect-string mongo-uri {:keys [conn db]} (mg/connect-via-uri connect-string)\n        (ring-resp/created \&quot;the url\&quot; (mc/insert-and-return db \&quot;catalog\&quot; incoming))]))&quot;, :offset 276, :ns &quot;this-one.service&quot;} {:command &quot;(defn post-gui [request]\n  (prn (:json-params request))\n  (let [incoming (:json-params request)\n        connect-string mongo-uri {:keys [conn db]} (mg/connect-via-uri connect-string)]\n    (ring-resp/created \&quot;the url\&quot; (mc/insert-and-return db \&quot;catalog\&quot; incoming))))&quot;, :offset 264, :ns &quot;this-one.service&quot;} {:command &quot;(defn home-page\n  [request]\n  (prn request) (http/json-print \&quot;hi\&quot;))&quot;, :offset 67, :ns &quot;this-one.service&quot;} {:command &quot;(defn get-projects\n  [request]\n  (let [uri mongo-uri {:keys [conn db]}\n        (mg/connect-via-uri uri)]\n    (http/json-response (mc/find-maps db \&quot;catalog\&quot;))))&quot;, :offset 159, :ns &quot;this-one.service&quot;} {:command &quot;(defn create-project [request]\n  (prn (:json-params request))\n  (let [incoming (:json-params request)\n        connect-string mongo-uri {:keys [conn db]} (mg/connect-via-uri connect-string)]\n    (ring-resp/created \&quot;the url\&quot; (mc/insert-and-return db \&quot;catalog\&quot; incoming))))&quot;, :offset 270, :ns &quot;this-one.service&quot;} {:command &quot;(def routes #{[\&quot;/\&quot; :get (conj common-interceptors `home-page)]\n              [\&quot;/about\&quot; :get (conj common-interceptors `about-page)]\n              [\&quot;/projects\&quot; :get (conj common-interceptors `get-projects)]\n              [\&quot;/project\&quot; :post (conj common-interceptors `create-project)]\n              [\&quot;/gui/:name\&quot; :get (conj common-interceptors `get-gui)]})&quot;, :offset 353, :ns &quot;this-one.service&quot;} {:command &quot;(def routes #{[\&quot;/\&quot; :get (conj common-interceptors `home-page)]\n              [\&quot;/about\&quot; :get (conj common-interceptors `about-page)]\n              [\&quot;/projects\&quot; :get (conj common-interceptors `get-projects)]\n              [\&quot;/project\&quot; :post (conj common-interceptors `create-project)]\n              })&quot;, :offset 298, :ns &quot;this-one.service&quot;} {:command &quot;(defn home-page\n  [request]\n  (prn request) (http/json-response \&quot;hi\&quot;))&quot;, :offset 70, :ns &quot;this-one.service&quot;} {:command &quot;(defn db-get-project [proj-name]\n  (let [connect-string mongo-uri\n        {:keys [conn db]} (mg/connect-via-uri connect-string)]\n    (mc/find-maps db \&quot;catalog\&quot; {:proj-name proj-name})))&quot;, :offset 185, :ns &quot;this-one.service&quot;} {:command &quot;(defn get-project\n  [request]\n  (http/json-response\n    (db-get-project (get-in request [:path-params :proj-name]))))&quot;, :offset 117, :ns &quot;this-one.service&quot;} {:command &quot;(ns this-one.service\n  (:require [io.pedestal.http :as http]\n            [io.pedestal.http.route :as route]\n            [io.pedestal.http.body-params :as body-params]\n            [io.pedestal.interceptor.helpers :refer [definterceptor defhandler]]\n            [ring.util.response :as ring-resp]\n            [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.json]))&quot;, :offset 394, :ns &quot;this-one.server&quot;} {:command &quot;(defhandler token-check\n   [request] (let [token]\n              (get-in request [:headers \&quot;x-catalog-token\&quot;]))\n            (if (not (= token \&quot;o brave new world\&quot;))\n              (assoc (ring-resp/response {:body \&quot;access denied\&quot;}) :status 403)))&quot;, :offset 243, :ns &quot;this-one.service&quot;} {:command &quot;(defhandler token-check\n   [request\n    (let [token]\n     (get-in request [:headers \&quot;x-catalog-token\&quot;]))\n    (if (not (= token \&quot;o brave new world\&quot;))\n      (assoc (ring-resp/response {:body \&quot;access denied\&quot;}) :status 403))])&quot;, :offset 222, :ns &quot;this-one.service&quot;} {:command &quot;(defhandler token-check [request]\n    (let [token (get-in request [:headers \&quot;x-catalog-token\&quot;])]\n      (if (not (= token \&quot;o brave new world\&quot;))\n        (assoc (ring-resp/response {:body \&quot;access denied\&quot;}) :status 403))))&quot;, :offset 218, :ns &quot;this-one.service&quot;} {:command &quot;(def common-interceptors [(body-params/body-params) http/html-body token-check])&quot;, :offset 80, :ns &quot;this-one.service&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration name="REPL for this-one" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="this-one" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for this-one" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ed898e8d-23ee-4a91-b2fa-ef2b626f75c5" name="Default Changelist" comment="" />
      <created>1581814968293</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1581814968293</updated>
    </task>
    <servers />
  </component>
  <component name="WindowStateProjectService">
    <state x="1158" y="264" width="710" height="578" key="find.popup" timestamp="1581815005395">
      <screen x="61" y="27" width="1859" height="1053" />
    </state>
    <state x="1158" y="264" width="710" height="578" key="find.popup/61.27.1859.1053@61.27.1859.1053" timestamp="1581815005395" />
    <state x="1104" y="259" width="816" height="678" key="search.everywhere.popup" timestamp="1581877637162">
      <screen x="61" y="27" width="1859" height="1053" />
    </state>
    <state x="1104" y="259" width="816" height="678" key="search.everywhere.popup/61.27.1859.1053@61.27.1859.1053" timestamp="1581877637162" />
  </component>
</project>